Support for Compiler Intrinsics

There are some traits that can not be implemented within the current
C++ language: to make these traits "just work" with user defined types,
some kind of additional help from the compiler is required. Currently
(April 2008) Visual C++ 8 and 9, GNU GCC 4.3 and MWCW 9 provide at
least some of the the necessary intrinsics, and other compilers will
no doubt follow in due course.

The Following traits classes always need compiler support to do the
right thing for all types (but all have safe fallback positions if
this support is unavailable):

is_union
is_pod
has_trivial_constructor
has_trivial_copy
has_trivial_move_constructor
has_trivial_assign
has_trivial_move_assign
has_trivial_destructor
has_nothrow_constructor
has_nothrow_copy
has_nothrow_assign
has_virtual_destructor
The following traits classes can't be portably implemented in the C++
language, although in practice, the implementations do in fact do the
right thing on all the compilers we know about:

is_empty
is_polymorphic
The following traits classes are dependent on one or more of the above:

is_class 